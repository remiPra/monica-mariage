---
import { Icon } from "astro-icon/components";
const { isVisible } = Astro.props;
---

<!-- Overlay avec effet de flou - utilisation de client:only pour éviter le rendu côté serveur -->
<div
  client:only="js"
  id="contact-overlay"
  class="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center z-50 transition-all duration-500 ease-in-out opacity-0 pointer-events-none"
>
  <!-- Contenu du Modal -->
  <div
    id="modal-content"
    class="relative bg-white p-8 rounded-2xl w-full max-w-md shadow-xl transform transition-all duration-500 ease-in-out scale-95 translate-y-4"
  >
    <!-- Bouton de fermeture élégant -->
    <button
      id="close-overlay"
      type="button"
      class="absolute top-4 right-4 w-8 h-8 flex items-center justify-center rounded-full text-[#8B7569] hover:bg-[#FDF8F7] transition-colors"
      aria-label="Fermer"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>

    <!-- En-tête avec style cohérent -->
    <div class="text-center mb-6">
      <h2 class="font-vibes text-3xl text-[#af7749] mb-4">
        Vous rêvez de trouver la robe parfaite pour votre mariage ?
      </h2>

      <!-- Séparateur décoratif -->
      <div class="flex items-center justify-center gap-4 mb-5">
        <span class="h-px w-12 bg-[#C5A880]"></span>
        <p class="text-[#8B7569] text-xs font-medium">UN CLIC, UNE RENCONTRE</p>
        <span class="h-px w-12 bg-[#C5A880]"></span>
      </div>

      <p class="text-[#5F4B3F] text-center max-w-md mx-auto mb-6">
        Une conversation personnalisée vaut mieux que mille recherches pour trouver votre robe idéale !      </p>
      
      <!-- Image décorative optionnelle -->
      <div class="w-24 h-24 mx-auto mb-6 rounded-full overflow-hidden">
        <img src="/logo-new.png" alt="Monica Mariage" class="w-full h-full object-cover" onerror="this.style.display='none'" />
      </div>
    </div>

    <!-- Boutons simplifiés -->
    <div class="space-y-4 mt-2">
      <!-- Bouton OUI -->
      <button
        id="whatsapp-redirect-btn"
        type="button"
        class="w-full py-4 bg-[#af7749] text-white rounded-full shadow-md hover:bg-[#925c36] hover:scale-105 transition-all duration-300 font-medium flex items-center justify-center"
      >
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          class="h-5 w-5 mr-2" 
          viewBox="0 0 24 24" 
          fill="currentColor"
        >
          <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"></path>
        </svg>
        Oui, je suis intéressée
      </button>
      
      <!-- Bouton NON -->
      <button
        id="close-later-btn"
        type="button"
        class="w-full py-3 bg-transparent text-[#8B7569] hover:text-[#5F4B3F] transition-colors font-medium text-sm"
      >
        Pas maintenant, merci
      </button>
    </div>

    <!-- Note de confidentialité -->
    <p class="text-[#8B7569] text-xs text-center mt-6">
      Je vous répondrai moi-même dans la journée, pour que nous puissions commencer cette belle aventure ensemble !
    </p>
  </div>
</div>

<script defer>
  // Fonction qui sera exécutée quand le navigateur est inactif
  const initModal = () => {
    const overlay = document.getElementById("contact-overlay");
    const modalContent = document.getElementById("modal-content");
    const closeButton = document.getElementById("close-overlay");
    const closeLaterBtn = document.getElementById("close-later-btn");
    const whatsappRedirectBtn = document.getElementById("whatsapp-redirect-btn");

    // Constantes de configuration
    const DISPLAY_DELAY_MS = 70000; // 30 secondes avant affichage (réduit de 50s à 30s)
    const REAPPEAR_AFTER_DAYS = 7; // Réapparaît après 7 jours même si fermé
    
    // Message pré-formaté pour WhatsApp
    const whatsappMessage = encodeURIComponent("Bonjour Monica Mariage ! Je suis intéressée par vos robes de mariée et j'aimerais avoir plus d'informations sur votre collection.");
    const whatsappLink = `https://wa.me/33668300960?text=${whatsappMessage}`;

    // Fonction pour afficher la modale avec animation et tracking
    const showOverlay = () => {
      overlay.classList.remove("opacity-0", "pointer-events-none");
      overlay.classList.add("opacity-100", "pointer-events-auto");

      // Animation d'entrée plus élégante
      modalContent.classList.remove("scale-95", "translate-y-4");
      modalContent.classList.add("scale-100", "translate-y-0");

      // Accessibilité - piéger le focus
      document.body.style.overflow = "hidden";

      // Tracking de l'affichage du modal
      if (window.sendGa4Event) {
        window.sendGa4Event("trigger_modal_view", {
          event_category: "Engagement",
          event_label: "Simple Modal Viewed",
          modal_type: "whatsapp_redirect"
        });
      }
    };

    // Fonction pour masquer la modale avec animation et tracking
    const hideOverlay = (permanent = false, reason = "close_button") => {
      overlay.classList.add("opacity-0", "pointer-events-none");
      overlay.classList.remove("opacity-100", "pointer-events-auto");

      // Animation de sortie
      modalContent.classList.add("scale-95", "translate-y-4");
      modalContent.classList.remove("scale-100", "translate-y-0");

      // Restaurer le scroll
      document.body.style.overflow = "";

      if (permanent) {
        // Stocker la date de fermeture pour permettre une réapparition ultérieure
        const currentDate = new Date().toISOString();
        localStorage.setItem("modalClosed", currentDate);
      }

      // Tracking de la fermeture du modal
      if (reason === "close_button" && window.sendGa4Event) {
        window.sendGa4Event("trigger_modal_close", {
          event_category: "Engagement",
          event_label: "Modal Closed",
          close_method: reason,
          modal_type: "whatsapp_redirect"
        });
      } else if (reason === "close_later" && window.sendGa4Event) {
        window.sendGa4Event("trigger_modal_close_later", {
          event_category: "Engagement",
          event_label: "Modal Closed - Will Return Later",
          modal_type: "whatsapp_redirect"
        });
      }
    };

    // Redirection WhatsApp avec tracking
    const redirectToWhatsapp = () => {
      // Tracking de la conversion
      if (window.sendGa4Event) {
        window.sendGa4Event("whatsapp_redirect", {
          event_category: "Conversion",
          event_label: "WhatsApp Redirect from Modal",
          value: 1,
          modal_type: "whatsapp_redirect"
        });
      }
      
      // Ouvrir WhatsApp dans un nouvel onglet
      window.open(whatsappLink, "_blank");
      
      // Fermer le modal
      hideOverlay(true, "whatsapp_redirect");
    };

    // Gestionnaires d'événements pour fermeture
    closeButton.addEventListener("click", () =>
      hideOverlay(true, "close_button")
    );
    
    closeLaterBtn.addEventListener("click", () =>
      hideOverlay(true, "close_later")
    );
    
    // Gestionnaire pour le bouton de redirection WhatsApp
    whatsappRedirectBtn.addEventListener("click", redirectToWhatsapp);

    // Permettre de fermer en cliquant à l'extérieur
    overlay.addEventListener("click", (e) => {
      if (e.target === overlay) {
        hideOverlay(true, "overlay_click");
      }
    });

    // Fermer avec la touche Échap
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && overlay.classList.contains("opacity-100")) {
        hideOverlay(true, "escape_key");
      }
    });

    // Vérification pour afficher la modale avec un délai
    const checkOverlayVisibility = () => {
      // Vérifier si l'utilisateur a déjà fermé la modale
      const modalClosedDate = localStorage.getItem("modalClosed");

      if (modalClosedDate) {
        // Convertir la date stockée et calculer le nombre de jours écoulés
        const closedDate = new Date(modalClosedDate);
        const currentDate = new Date();
        const daysDifference = Math.floor(
          (currentDate - closedDate) / (1000 * 60 * 60 * 24)
        );

        // Si le nombre de jours défini s'est écoulé, on peut réafficher le modal
        if (daysDifference < REAPPEAR_AFTER_DAYS) {
          return; // Ne pas afficher si la période de non-affichage n'est pas écoulée
        }
      }

      // Vérifier si nous avons déjà défini un temps pour la modale
      const modalTimerSet = localStorage.getItem("modalTimerSet");

      if (!modalTimerSet) {
        // Première visite sur le site, définir le temps actuel
        localStorage.setItem("modalTimerSet", Date.now().toString());

        // Différer l'affichage selon le délai configuré (réduit à 30 secondes)
        setTimeout(showOverlay, DISPLAY_DELAY_MS);
        return;
      }

      // Calculer si le temps s'est écoulé depuis la première visite
      const timeSinceFirstVisit = Date.now() - parseInt(modalTimerSet);

      if (timeSinceFirstVisit >= DISPLAY_DELAY_MS) {
        // Le temps est écoulé, afficher avec un léger délai supplémentaire
        setTimeout(showOverlay, 1000);
      } else {
        // Définir un minuteur pour le temps restant
        const remainingTime = DISPLAY_DELAY_MS - timeSinceFirstVisit;
        setTimeout(showOverlay, remainingTime + 1000);
      }
    };

    // Exécuter la vérification de visibilité
    checkOverlayVisibility();
  };

  // Utiliser une approche qui permet au LCP de se terminer avant d'initialiser la modale
  if ("requestIdleCallback" in window) {
    // Attendre que le navigateur soit inactif pour initialiser la modale
    window.requestIdleCallback(
      () => {
        // S'assurer que la page est bien chargée avant d'initialiser
        if (document.readyState === "complete") {
          // Attendre encore un peu pour être sûr que le LCP est terminé
          setTimeout(initModal, 2000);
        } else {
          // Attendre que la page soit complètement chargée
          window.addEventListener("load", () => {
            setTimeout(initModal, 2000);
          });
        }
      },
      { timeout: 10000 }
    ); // Timeout de 10s au cas où le navigateur reste occupé
  } else {
    // Fallback pour les navigateurs qui ne supportent pas requestIdleCallback
    window.addEventListener("load", () => {
      // Attendre que tout soit chargé puis ajouter un délai supplémentaire
      setTimeout(initModal, 3000);
    });
  }
</script>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.5s ease forwards;
  }

  /* Style des placeholders */
  ::placeholder {
    color: #c5a88080;
    opacity: 0.6;
  }

  /* Améliorer l'apparence des champs focus */
  input:focus,
  textarea:focus {
    box-shadow: 0 0 0 3px rgba(175, 123, 73, 0.1);
  }
</style>