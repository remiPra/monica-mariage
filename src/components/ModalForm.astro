---
import { Icon } from "astro-icon/components";
const { isVisible } = Astro.props;
---

<!-- Overlay avec effet de flou - utilisation de client:only pour éviter le rendu côté serveur -->
<div
  client:only="js"
  id="contact-overlay"
  class="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center z-50 transition-all duration-500 ease-in-out opacity-0 pointer-events-none"
>
  <!-- Contenu du Modal -->
  <div
    id="modal-content"
    class="relative bg-white p-8 rounded-2xl w-full max-w-lg shadow-xl transform transition-all duration-500 ease-in-out scale-95 translate-y-4"
  >
    <!-- Bouton de fermeture élégant -->
    <button
      id="close-overlay"
      type="button"
      class="absolute top-4 right-4 w-8 h-8 flex items-center justify-center rounded-full text-[#8B7569] hover:bg-[#FDF8F7] transition-colors"
      aria-label="Fermer"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>

    <!-- En-tête avec style cohérent -->
    <div class="text-center mb-6">
      <h2 class="font-vibes text-3xl text-[#af7749] mb-2">
        Vous rêvez de la robe parfaite ?
      </h2>

      <!-- Séparateur décoratif -->
      <div class="flex items-center justify-center gap-4 mb-4">
        <span class="h-px w-12 bg-[#C5A880]"></span>
        <p class="text-[#8B7569] text-xs font-medium">PRENONS CONTACT</p>
        <span class="h-px w-12 bg-[#C5A880]"></span>
      </div>

      <p class="text-[#5F4B3F] text-center max-w-md mx-auto">
        Laissez-nous vos coordonnées pour vous aider à trouver la robe de vos
        rêves.
      </p>
    </div>

    <!-- Formulaire de contact élégant -->
    <form id="contact-form" class="space-y-4">
      <div class="grid grid-cols-2 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-[#5F4B3F] font-medium text-sm mb-1"
            >Prénom *</label
          >
          <input
            id="prenom"
            name="prenom"
            type="text"
            placeholder="Votre prénom"
            required
            class="w-full p-3 border border-[#F0E6E2] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#af7749]/30 focus:border-[#af7749] transition"
          />
        </div>
        <div>
          <label class="block text-[#5F4B3F] font-medium text-sm mb-1"
            >Nom *</label
          >
          <input
            id="nom"
            name="nom"
            type="text"
            placeholder="Votre nom"
            required
            class="w-full p-3 border border-[#F0E6E2] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#af7749]/30 focus:border-[#af7749] transition"
          />
        </div>
      </div>

      <div class="grid grid-cols-2 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-[#5F4B3F] font-medium text-sm mb-1"
            >Email *</label
          >
          <input
            id="email"
            name="email"
            type="email"
            placeholder="Votre email"
            required
            class="w-full p-3 border border-[#F0E6E2] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#af7749]/30 focus:border-[#af7749] transition"
          />
        </div>
        <div>
          <label class="block text-[#5F4B3F] font-medium text-sm mb-1"
            >Téléphone *</label
          >
          <input
            id="telephone"
            name="telephone"
            type="tel"
            placeholder="06 12 34 56 78"
            required
            class="w-full p-3 border border-[#F0E6E2] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#af7749]/30 focus:border-[#af7749] transition"
          />
        </div>
      </div>

      <div>
        <label class="block text-[#5F4B3F] font-medium text-sm mb-1"
          >Message (optionnel)</label
        >
        <textarea
          id="message"
          name="message"
          rows="2"
          placeholder="Parlez-nous de votre projet, vos inspirations, ou posez-nous vos questions..."
          class="w-full p-3 border border-[#F0E6E2] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#af7749]/30 focus:border-[#af7749] transition"
        ></textarea>
      </div>

      <!-- Boutons d'action -->
      <div class="flex flex-col sm:flex-row justify-between gap-3 mt-6">
        <button
          type="submit"
          class="px-6 py-3 bg-[#af7749] text-white rounded-full shadow-md hover:bg-[#925c36] hover:scale-105 transition-all duration-300 font-medium"
        >
          Envoyer ma demande
        </button>
        <button
          id="close-later-btn"
          type="button"
          class="px-6 py-3 bg-transparent text-[#8B7569] hover:text-[#5F4B3F] transition-colors underline font-medium"
        >
          Pas maintenant, je reviendrai plus tard
        </button>

        <!-- Message de confirmation avec animation -->
        <div
          id="submission-message"
          class="hidden mt-4 p-4 bg-[#F3FAF3] border border-[#D1EAD1] rounded-lg text-center text-[#4B8B55]"
        >
          <svg
            class="w-6 h-6 mx-auto mb-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5 13l4 4L19 7"></path>
          </svg>
          <p class="font-medium">Merci ! Votre message a bien été envoyé.</p>
          <p class="text-sm mt-1">
            Nous vous répondrons dans les plus brefs délais.
          </p>
        </div>
      </div>

      <!-- Note de confidentialité -->
      <p class="text-[#8B7569] text-xs text-center mt-6">
        En soumettant ce formulaire, vous acceptez que vos données soient
        utilisées exclusivement pour répondre à votre demande.
      </p>
    </form>
  </div>
</div>

<script defer>
  // Fonction qui sera exécutée quand le navigateur est inactif
  const initModal = () => {
    const overlay = document.getElementById("contact-overlay");
    const modalContent = document.getElementById("modal-content");
    const closeButton = document.getElementById("close-overlay");
    const contactForm = document.getElementById("contact-form");
    const submissionMessage = document.getElementById("submission-message");
    const closeLaterBtn = document.getElementById("close-later-btn");

    // Variables pour le tracking de formulaire
    let formFieldsHistory = [];
    let formStarted = false;
    let formFields = {
      prenom: false,
      nom: false,
      email: false,
      telephone: false,
      message: false,
    };

    // Fonction pour afficher la modale avec animation et tracking
    const showOverlay = () => {
      overlay.classList.remove("opacity-0", "pointer-events-none");
      overlay.classList.add("opacity-100", "pointer-events-auto");

      // Animation d'entrée plus élégante
      modalContent.classList.remove("scale-95", "translate-y-4");
      modalContent.classList.add("scale-100", "translate-y-0");

      // Accessibilité - piéger le focus
      document.body.style.overflow = "hidden";

      // Tracking de l'affichage du modal
      if (window.sendGa4Event) {
        window.sendGa4Event("trigger_modal_view", {
          event_category: "Engagement",
          event_label: "Contact Modal View",
          form_name: "contact_form",
          non_interaction: true,
        });
      }
    };

    // Fonction pour masquer la modale avec animation et tracking
    const hideOverlay = (permanent = false, reason = "close_button") => {
      overlay.classList.add("opacity-0", "pointer-events-none");
      overlay.classList.remove("opacity-100", "pointer-events-auto");

      // Animation de sortie
      modalContent.classList.add("scale-95", "translate-y-4");
      modalContent.classList.remove("scale-100", "translate-y-0");

      // Restaurer le scroll
      document.body.style.overflow = "";

      if (permanent) {
        sessionStorage.setItem("modalClosed", "true"); // Empêche le retour pendant la session
      }

      // Tracking de l'abandon du formulaire s'il y a eu des interactions
      if (formStarted && reason !== "form_submitted") {
        const filledFields = Object.entries(formFields)
          .filter(([_, filled]) => filled)
          .map(([field, _]) => field);

        if (window.sendGa4Event) {
          window.sendGa4Event("trigger_form_abandon", {
            event_category: "Conversion",
            event_label: "Form Abandoned",
            form_name: "contact_form",
            form_step: formFieldsHistory.join(" > "),
            fields_completed: filledFields.length,
            fields_filled: filledFields.join(","),
          });
        }
      }

      // Tracking de la fermeture du modal
      if (reason === "close_button" && window.sendGa4Event) {
        window.sendGa4Event("trigger_modal_close", {
          event_category: "Engagement",
          event_label: "Modal Closed",
          close_method: reason,
        });
      } else if (reason === "close_later" && window.sendGa4Event) {
        window.sendGa4Event("trigger_modal_close_later", {
          event_category: "Engagement",
          event_label: "Modal Closed - Will Return Later",
        });
      }
    };

    // Gestionnaires d'événements pour fermeture
    closeButton.addEventListener("click", () =>
      hideOverlay(true, "close_button")
    );
    closeLaterBtn.addEventListener("click", () =>
      hideOverlay(true, "close_later")
    );

    // Permettre de fermer en cliquant à l'extérieur
    overlay.addEventListener("click", (e) => {
      if (e.target === overlay) {
        hideOverlay(true, "overlay_click");
      }
    });

    // Fermer avec la touche Échap
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && overlay.classList.contains("opacity-100")) {
        hideOverlay(true, "escape_key");
      }
    });

    // Tracking des interactions avec les champs du formulaire
    const formInputs = contactForm.querySelectorAll("input, textarea");

    // Suivi du focus initial sur les champs
    formInputs.forEach((input) => {
      input.addEventListener("focus", () => {
        if (!formStarted) {
          formStarted = true;

          // Premier champ sur lequel l'utilisateur a cliqué
          if (window.sendGa4Event) {
            window.sendGa4Event("trigger_form_field_focus", {
              event_category: "Engagement",
              event_label: "First Field Focus",
              field_name: input.name,
              form_name: "contact_form",
            });
          }
        }
      });

      // Suivi du remplissage des champs
      input.addEventListener("blur", () => {
        if (input.value.trim() !== "") {
          // Marquer le champ comme rempli
          if (!formFields[input.name]) {
            formFields[input.name] = true;

            // Ajouter à l'historique des champs remplis
            formFieldsHistory.push(input.name);

            if (window.sendGa4Event) {
              window.sendGa4Event("trigger_form_field_filled", {
                event_category: "Engagement",
                event_label: "Field Filled",
                field_name: input.name,
                form_name: "contact_form",
                field_position: formFieldsHistory.length,
              });
            }
          }
        }
      });
    });

    // Soumission du formulaire avec animation et tracking
    contactForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Collecter les données du formulaire
      const formData = {
        prenom: document.getElementById("prenom").value || "",
        nom: document.getElementById("nom").value,
        email: document.getElementById("email").value || "",
        telephone: document.getElementById("telephone").value,
        message: document.getElementById("message").value || "",
      };

      // Vérifier si les champs obligatoires sont remplis
      if (!formData.nom || !formData.telephone) {
        // Afficher un message d'erreur
        submissionMessage.innerHTML = `
          <svg class="w-6 h-6 mx-auto mb-2 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
          <p class="font-medium">Veuillez remplir les champs obligatoires</p>
          <p class="text-sm mt-1">Le nom et le téléphone sont requis.</p>
        `;
        submissionMessage.classList.remove("hidden");
        submissionMessage.classList.add("animate-fade-in");
        submissionMessage.style.backgroundColor = "#FADEDE";
        submissionMessage.style.borderColor = "#EABCBC";
        submissionMessage.style.color = "#AF3B3B";

        // Tracking des erreurs de soumission
        if (window.sendGa4Event) {
          window.sendGa4Event("trigger_form_submit_error", {
            event_category: "Engagement",
            event_label: "Form Submit Error",
            form_name: "contact_form",
            error_type: "missing_required_fields",
          });
        }

        return;
      }

      try {
        // Désactiver les champs pendant l'envoi
        contactForm
          .querySelectorAll("input, textarea, button")
          .forEach((el) => {
            el.disabled = true;
          });

        // Envoi des données à l'API
        const response = await fetch(
          "https://monica-mariage-next.vercel.app/api/send-email",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          }
        );

        if (!response.ok) {
          throw new Error("Erreur lors de l'envoi du formulaire");
        }

        // Tracking du succès de la soumission
        if (window.sendGa4Event) {
          window.sendGa4Event("trigger_form_submit_success", {
            event_category: "Conversion",
            event_label: "Form Submit Success",
            form_name: "contact_form",
            value: 1, // Valeur de conversion
            fields_completed: Object.values(formFields).filter((v) => v).length,
          });
        }

        // Afficher le message de confirmation si l'envoi est réussi
        submissionMessage.innerHTML = `
          <svg class="w-6 h-6 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <p class="font-medium">Merci ! Votre message a bien été envoyé.</p>
          <p class="text-sm mt-1">Nous vous répondrons dans les plus brefs délais.</p>
        `;
        submissionMessage.classList.remove("hidden");
        submissionMessage.classList.add("animate-fade-in");
        submissionMessage.style.backgroundColor = "#F3FAF3";
        submissionMessage.style.borderColor = "#D1EAD1";
        submissionMessage.style.color = "#4B8B55";

        // Fermer après un délai
        setTimeout(() => {
          hideOverlay(true, "form_submitted");

          // Réinitialiser le formulaire après fermeture
          setTimeout(() => {
            contactForm.reset();
            formStarted = false;
            formFieldsHistory = [];
            Object.keys(formFields).forEach((key) => (formFields[key] = false));

            contactForm
              .querySelectorAll("input, textarea, button")
              .forEach((el) => {
                el.disabled = false;
              });
            submissionMessage.classList.add("hidden");
          }, 500);
        }, 2500);
      } catch (error) {
        console.error("Erreur:", error);
        // Gérer l'erreur
        submissionMessage.innerHTML = `
          <svg class="w-6 h-6 mx-auto mb-2 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
          <p class="font-medium">Une erreur est survenue</p>
          <p class="text-sm mt-1">Veuillez réessayer ou nous contacter directement.</p>
        `;
        submissionMessage.classList.remove("hidden");
        submissionMessage.classList.add("animate-fade-in");
        submissionMessage.style.backgroundColor = "#FADEDE";
        submissionMessage.style.borderColor = "#EABCBC";
        submissionMessage.style.color = "#AF3B3B";

        // Tracking des erreurs d'API
        if (window.sendGa4Event) {
          window.sendGa4Event("trigger_form_submit_error", {
            event_category: "Engagement",
            event_label: "Form Submit Error",
            form_name: "contact_form",
            error_type: "api_error",
          });
        }

        // Réactiver les champs pour permettre une nouvelle tentative
        contactForm
          .querySelectorAll("input, textarea, button")
          .forEach((el) => {
            el.disabled = false;
          });
      }
    });

    // Tracking de l'abandon du formulaire si l'utilisateur quitte la page
    window.addEventListener("beforeunload", () => {
      // Si le formulaire a été commencé mais pas soumis avec succès
      if (formStarted) {
        const filledFields = Object.entries(formFields)
          .filter(([_, filled]) => filled)
          .map(([field, _]) => field);

        // Note: cet événement peut ne pas être envoyé car la page se ferme
        // mais nous tentons de l'envoyer pour la prise en charge via sendBeacon
        if (window.sendGa4Event) {
          window.sendGa4Event("trigger_form_abandon", {
            event_category: "Conversion",
            event_label: "Form Abandoned - Page Exit",
            form_name: "contact_form",
            form_step: formFieldsHistory.join(" > "),
            fields_completed: filledFields.length,
            fields_filled: filledFields.join(","),
          });
        }
      }
    });

    // Vérification pour afficher la modale avec un délai important pour ne pas affecter le LCP
    const checkOverlayVisibility = () => {
      // Vérifier si l'utilisateur a déjà fermé la modale dans cette session
      if (sessionStorage.getItem("modalClosed") === "true") return;

      // Vérifier si nous avons déjà défini un temps pour la modale
      const modalTimerSet = sessionStorage.getItem("modalTimerSet");

      if (!modalTimerSet) {
        // Première visite sur le site, définir le temps actuel
        sessionStorage.setItem("modalTimerSet", Date.now().toString());

        // Différer l'affichage beaucoup plus longtemps (45 secondes) pour ne pas affecter le LCP
        setTimeout(showOverlay, 20000);
        return;
      }

      // Calculer si le temps s'est écoulé depuis la première visite
      const timeSinceFirstVisit = Date.now() - parseInt(modalTimerSet);
      const delayInMs = 20000; // 45 secondes

      if (timeSinceFirstVisit >= delayInMs) {
        // Le temps est écoulé, afficher avec un léger délai supplémentaire
        setTimeout(showOverlay, 1000);
      } else {
        // Définir un minuteur pour le temps restant
        const remainingTime = delayInMs - timeSinceFirstVisit;
        setTimeout(showOverlay, remainingTime + 1000);
      }
    };

    // Exécuter la vérification de visibilité
    checkOverlayVisibility();
  };

  // Utiliser une approche qui permet au LCP de se terminer avant d'initialiser la modale
  if ("requestIdleCallback" in window) {
    // Attendre que le navigateur soit inactif pour initialiser la modale
    window.requestIdleCallback(
      () => {
        // S'assurer que la page est bien chargée avant d'initialiser
        if (document.readyState === "complete") {
          // Attendre encore un peu pour être sûr que le LCP est terminé
          setTimeout(initModal, 2000);
        } else {
          // Attendre que la page soit complètement chargée
          window.addEventListener("load", () => {
            setTimeout(initModal, 2000);
          });
        }
      },
      { timeout: 10000 }
    ); // Timeout de 10s au cas où le navigateur reste occupé
  } else {
    // Fallback pour les navigateurs qui ne supportent pas requestIdleCallback
    window.addEventListener("load", () => {
      // Attendre que tout soit chargé puis ajouter un délai supplémentaire
      setTimeout(initModal, 3000);
    });
  }
</script>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.5s ease forwards;
  }

  /* Style des placeholders */
  ::placeholder {
    color: #c5a88080;
    opacity: 0.6;
  }

  /* Améliorer l'apparence des champs focus */
  input:focus,
  textarea:focus {
    box-shadow: 0 0 0 3px rgba(175, 123, 73, 0.1);
  }
</style>
